#include <iostream>
using namespace std;


//class Base
//{
//public:
//	virtual void funtest1()
//	{
//		cout<<"Base::funtest1()"<<endl;
//	}
//
//	virtual void funtest2()
//	{
//		cout<<"Base::funtest2()"<<endl;
//	}
//public:
//	int _b;
//};
//
//class Dirvate:public Base
//{
//public:
//	void funtest1()override
//	{
//		cout<<"Dirvate::funtest1()"<<endl;
//	}
//
//	void funtest2()override
//	{
//		cout<<"Dirvate::funtest2()"<<endl;
//	}
//public:
//	int _d;
//};
//
//typedef void (*fun)();
//
//void Fun()
//{
//	Base b;
//	
//	fun* pfun=(fun*)(*(int*)(&b));
//	while(*pfun)
//	{
//		(*pfun)();
//		pfun=(fun*)((int*)pfun+1);
//	}
//}
//
//
//int main()
//{
//	Fun();
//	return 0;
//}

//void Fun(Base& b)
//{
//	b.funtest1();
//	b.funtest2();
//}
//
//int main()
//{
//	Base b;
//	b._b=1;
//	Dirvate d;
//	d._b=2;
//	d._d=3;
//	Fun(b);
//	Fun(d);
//	return 0;
//}



//
//class CBase0
//{
//public:
//	CBase0()
//	{
//		m_iTest = 0xB0;
//	}
//	virtual void PrintB0()
//	{
//		cout<<"m_iTest = "<<hex<<m_iTest<< " CBase0::PrintB0()" <<endl;
//	}
//	int m_iTest;
//};
//class CBase1
//{
//public:
//	CBase1()
//	{
//		m_iTest = 0xB1;
//	}
//	virtual void PrintB1()
//	{
//		cout<<"m_iTest = "<<hex<<m_iTest<< " CBase1::PrintB1()" <<endl;
//	}
//	int m_iTest;
//};
//class CBase2
//{
//public:
//	CBase2()
//	{
//		m_iTest = 0xB2;
//	}
//	virtual void PrintB2()
//	{
//		cout<<"m_iTest = "<<hex<<m_iTest<< " CBase2::PrintB2()" <<endl;
//	}
//	int m_iTest;
//};
//class CDerived:public CBase0, public CBase1, public CBase2
//{
//public:
//	CDerived()
//	{
//		m_iTest = 0xD0;
//	}
//	virtual void PrintD()
//	{
//		cout<<"m_iTest = "<<hex<<m_iTest<< " CDerived::PrintD()"<<endl;
//	}
//	int m_iTest;
//};
//typedef void (*VFTABLE_FUN)();
//
//void PrintVfPTab(char * _pStr, int *_pVfAddr)
//{
//	cout<<_pStr<<endl;
//	for (int iIdx = 0; ;iIdx++)
//	{
//		VFTABLE_FUN pPrintVTab = (VFTABLE_FUN)(*(_pVfAddr + iIdx));
//		if (NULL == pPrintVTab)
//		{
//			break;
//		}
//		pPrintVTab();
//		cout<<( int*)pPrintVTab<<endl;
//	}
//	cout<<endl;
//}
//void FunTest()
//{
//	CDerived derived;
//	cout<< sizeof(derived)<<endl;
//	int *pVfTAddr = NULL;
//	CBase0& base0 = derived;
//	pVfTAddr = ( int*)(*(int *)&base0);
//	PrintVfPTab( "CBase0 virtual Tab:", pVfTAddr);
//	CBase1& base1 = derived;
//	pVfTAddr = ( int*)(*(int *)&base1);
//	PrintVfPTab( "CBase1 virtual Tab:", pVfTAddr);
//	CBase2& base2 = derived;
//	pVfTAddr = ( int*)(*(int *)&base2);
//	PrintVfPTab( "CBase2 virtual Tab:", pVfTAddr);
//	pVfTAddr = ( int*)(*(int *)&derived);
//	PrintVfPTab( "CDerived virtual Tab:" , pVfTAddr);
//	derived.PrintB0();
//	derived.PrintB1();
//	derived.PrintB2();
//	derived.PrintD();
//}
//
//int main()
//{
//	FunTest();
//	return 0;
//}



//class Base1
//{
//public:
//	virtual void Fun1()
//	{
//		cout<<"Base1::Fun1()"<<endl;
//	}
//
//	virtual void Fun2()
//	{
//		cout<<"Base1::Fun2()"<<endl;
//	}
//	int _b1;
//};
//
//class Base2
//{
//public:
//	virtual void Fun3()
//	{
//		cout<<"Base2::Fun3()"<<endl;
//	}
//	
//	virtual void Fun4()
//	{
//		cout<<"Base2::Fun4()"<<endl;
//	}
//
//	int _b2;
//};
//class Derive:public Base1,public Base2
//{
//public:
//	virtual void Fun0()
//	{
//		cout<<"Derive::Fun0()"<<endl;
//	}
//	virtual void Fun2()
//	{
//		cout<<"Derive::Fun2()"<<endl;
//	}
//	virtual void Fun3()
//	{
//		cout<<"Derive::Fun3()"<<endl;
//	}
//
//	int _d;
//};
//
//typedef void (*Fun)();
//void FunTest()
//{
//	Derive d;
//
//	cout<<"Base1:"<<endl;
//	Base1& b1=d;
//	Fun* pFun=(Fun*)(*((int*)(&b1)));
//	while(*pFun)
//	{
//		(*pFun)();
//		pFun=(Fun*)((int*)pFun+1);
//	}
//
//	cout<<"Base2:"<<endl;
//	Base2& b2=d;
//	pFun=(Fun*)(*((int*)(&b2)));
//	while(*pFun)
//	{
//		(*pFun)();
//		pFun=(Fun*)((int*)pFun+1);
//	}
//
//}
//
//
//int main()
//{
//	FunTest();
//	return 0;
//}

//int main()
//{
//	//Base b;
//	//Derive d;
//	//b._b=1;
//	//d._b=2;
//	//d._d=3;
//	//FunTest(b);
//	//FunTest(d);
//	FunTest();
//	return 0;
//}



//
//class A
//{
//public:
//	virtual void fun1()
//	{
//		cout<<"A::fun1()"<<endl;
//	}
//	virtual void fun()
//	{
//		cout<<"A::fun()"<<endl;
//	}
//
//	int _a;
//};
//
//class B1:virtual public A
//{
//public:
//	virtual void fun1()
//	{
//		cout<<"B1::fun1()"<<endl;
//	}
//	virtual void fun2()
//	{
//		cout<<"B1::fun2()"<<endl;
//	}
//
//	int _b1;
//};
//
//class B2:virtual public A
//{
//public:
//	virtual void fun1()
//	{
//		cout<<"B2::fun1()"<<endl;
//	}
//	virtual void fun3()
//	{
//		cout<<"B2::fun3()"<<endl;
//	}
//	virtual void fun4()
//	{
//		cout<<"B2::fun4()"<<endl;
//	}
//
//	int _b2;
//};
//
//class C:public B1,public B2
//{
//public:
//	virtual void fun0()
//	{
//		cout<<"C::fun0()"<<endl;
//	}
//	virtual void fun1()
//	{
//		cout<<"C::fun1()"<<endl;
//	}
//	virtual void fun2()
//	{
//		cout<<"C::fun2()"<<endl;
//	}
//	virtual void fun4()
//	{
//		cout<<"C::fun4()"<<endl;
//	}
//	
//	int _c;
//};
//
//typedef void (*Fun)();
//void funtest()
//{
//	C c;
//
//	cout<<"B1:"<<endl;
//	B1& b1=c;
//	Fun* pFun=(Fun*)(*((int*)(&b1)));
//	while(*pFun)
//	{
//		(*pFun)();
//		pFun=(Fun*)((int*)pFun+1);
//	}
//
//	cout<<"B2:"<<endl;
//	B2& b2=c;
//	pFun=(Fun*)(*((int*)(&b2)));
//	while(*pFun)
//	{
//		(*pFun)();
//		pFun=(Fun*)((int*)pFun+1);
//	}
//
//	cout<<"A"<<endl;
//	A& a=c;
//	pFun=(Fun*)(*((int*)(&a)));
//	while(*pFun)
//	{
//		(*pFun)();
//		pFun=(Fun*)((int*)pFun+1);
//	}
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}



//class A
//{
//public:
//	virtual void fun1()
//	{
//		cout<<"A::fun1()"<<endl;
//	}
//	virtual void fun2()
//	{
//		cout<<"A::fun2()"<<endl;
//	}
//
//	int _a;
//};
//
//class B:virtual public A
//{
//public:
//	virtual void fun1()
//	{
//		cout<<"B::fun1()"<<endl;
//	}
//	virtual void fun3()
//	{
//		cout<<"B::fun3()"<<endl;
//	}
//
//	int _b;
//};
//
//typedef void (*Fun)();
//void funtest()
//{
//	B b;
//
//	cout<<"A:"<<endl;
//	A& a=b;
//	Fun* pFun=(Fun*)(*((int*)(&a)));
//	while(*pFun)
//	{
//		(*pFun)();
//		pFun=(Fun*)((int*)pFun+1);
//	}
//
//	cout<<"B:"<<endl;
//	pFun=(Fun*)(*((int*)(&b)));
//	while(*pFun)
//	{
//		(*pFun)();
//		pFun=(Fun*)((int*)pFun+1);
//	}
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}




//class A
//{
//public:
//	A()
//		:_a(1)
//	{
//		cout<<"A()"<<endl;
//	}
//	~A()
//	{
//		cout<<"~A()"<<endl;
//	}
//private:
//	int _a;
//};
//
//class B:public A
//{
//public:
//	B()
//		:_b(2)
//	{
//		cout<<"B()"<<endl;
//	}
//	~B()
//	{
//		cout<<"~B()"<<endl;
//	}
//private:
//	int _b;
//};
//
//int main()
//{
//	A* pa=new B;
//	delete pa;
//	return 0;
//}




class A
{
public:
	virtual A& operator=(A& a)
	{}
private:
	int _a;
};

class B:public A
{
public:
	virtual B& operator=(B& b)
	{}
private:
	int _b;
};

int main()
{
	A a;
	B b;
	A& ra=a;
	ra=b;
	A& raa=b;
	raa=a;
	return 0;
}